import Head from 'next/head'
import { stringify } from 'querystring';
import * as React from "react"
import { useState } from "react"
import Form from 'react-bootstrap/Form';
import Table from 'react-bootstrap/Table';
import styles from '../styles/Home.module.css'


export default function Home() {
  let [value, setValue] = useState('default');
  let [temp, setTemp] = useState('aaaa');

  let [character, setCharacter] = useState([{ name: "ナレーション", renpy: "narrator" }])

  // define raw lines
  let lines: string[] = []

  // define parsed lines
  let parsed_lines_chara: string[] = []
  let parsed_lines_dialogue: string[] = []

  React.useEffect(() => {
    let temp2: string = value
    let render_lines: string = ""
    temp2 = temp2.replace(/\t/d, '')
    temp2 = temp2.replace(/\u3000/g, '')
    temp2 = temp2.replace(/	/g, '')
    lines = temp2.split('\n')

    // reset variables
    parsed_lines_chara = []
    parsed_lines_dialogue = []

    // parse lines
    temp2 = ""
    for (let i = 0; i < lines.length; i++) {
      if (lines[i] != "") {
        if (lines[i].includes("「")) {
          let position_split = lines[i].indexOf('「')
          const filtered = character.filter(character => {
            return character.name === lines[i].slice(0, position_split)
          })
          // if (!filtered) {
          //   console.log("it has")
          // } else {
          //   console.log("it does not have")
          //   addCharacter(lines[i].slice(0, position_split))
          // }
          parsed_lines_chara.push(lines[i].slice(0, position_split))
          parsed_lines_dialogue.push(lines[i].slice(position_split + 1, -1))
          temp2 += lines[i] + "\n"
        } else {
          parsed_lines_chara.push("ナレーション")
          parsed_lines_dialogue.push(lines[i])
          temp2 += lines[i] + "\n"
        }
      }
    }

    let character_list = Array.from(new Set(parsed_lines_chara))
    character_list = character_list.filter(function (e) { return e !== 'ナレーション' })
    character_list = character_list.filter(function (e) { return e !== '' })

    for (let i = 0; i < character_list.length; i++) {
      const index = character.findIndex((item) => item.name === character_list[i])
      if (index == -1) {
        setCharacter(
          (p) => ([
            ...p,
            {
              name: character_list[i],
              renpy: character_list[i],
              index: character.indexOf({ name: character_list[i], renpy: character_list[i] })
            }
          ])
        )
      }
    }

    // render lines
    for (let i = 0; i < parsed_lines_chara.length; i++) {
      // retrieve character name

      if (parsed_lines_chara[i] === "") {
        const filtered = character.filter(obj => {
          return obj.name === "ナレーション"
        })
        render_lines += filtered[0].renpy
      } else {
        const filtered = character.filter(obj => obj.name == parsed_lines_chara[i])
        if (filtered[0]) {
          render_lines += filtered[0].name
        }
      }

      // retrieve dialogue
      render_lines += " \""
      render_lines += parsed_lines_dialogue[i]
      render_lines += "\""
      render_lines += "\n"
    }
    setTemp(render_lines)
  }, [value, character])

  return (
    <div className={styles.container}>
      <Head>
        <title>novel2renpy</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h3 className="mt-5">novel2renpy</h3>
        <div className="container mt-5">
          <div className="row">
            <div className="col-6">
              <Form.Control type="email" placeholder="ここに原稿を入力..." as="textarea" onChange={(event) => setValue(event.target.value)} rows={30} />
            </div>
            <div className="col-6">
              <Form.Control value={temp} disabled placeholder="OOAO" as="textarea" rows={30} />
            </div>
          </div>
        </div>
        <div className="container">
          <Table striped bordered hover className="mt-5">
            <thead>
              <tr>
                <th>キャラクター名</th>
                <th>Ren'Py コード内での定義</th>
              </tr>
            </thead>
            <tbody>
              {character.map((obj, index) => {
                return (
                  <tr key={obj.renpy}>
                    <td>{obj.name}</td>
                    <td>{obj.renpy}</td>
                  </tr>
                )
              })}
            </tbody>
          </Table>
        </div>
      </main>
    </div>
  )
}
